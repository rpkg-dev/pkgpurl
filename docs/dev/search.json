[{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://pkgpurl.rpkg.dev/dev/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODOs","title":"TODOs","text":"Add .qmd support Mention RStudio-Add-splitChunk file bug report native RStudio support functionality (add-issues; e.g. splits wrong source pane invoked command palette active source pane primary one) Check https://rtask.thinkr.fr/-development-starts--documentation/ pkg fusen Advertise package relevant places https://github.com/rstudio/rstudio/issues/5809","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Salim Brüggemann. Author, maintainer.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brüggemann S (2022). pkgpurl: Facilitate Authoring R Packages R Markdown File Format. https://pkgpurl.rpkg.dev, https://gitlab.com/salim_b/r/pkgs/pkgpurl.","code":"@Manual{,   title = {pkgpurl: Facilitate Authoring R Packages in the R Markdown File Format},   author = {Salim Brüggemann},   year = {2022},   note = {https://pkgpurl.rpkg.dev, https://gitlab.com/salim_b/r/pkgs/pkgpurl}, }"},{"path":"https://pkgpurl.rpkg.dev/dev/index.html","id":"pkgpurl-facilitate-authoring-r-packages-in-the-r-markdown-file-format","dir":"","previous_headings":"","what":"Facilitate Authoring R Packages in the R Markdown File Format","title":"Facilitate Authoring R Packages in the R Markdown File Format","text":"pkgpurl facilitates R package authoring using literate programming approach. main idea behind write R source code R Markdown files (Rmd/*.Rmd), allows actual code freely mixed explanatory supplementary information expressive Markdown format. main object pkgpurl provide standardized way compile bare .R files prose-enhanced thus human-oriented .Rmd files. basic idea behind concept package implements originates Yihui Xie. See blog post Write R Package Using Literate Programming Techniques details, ’s definitively worth reading. package’s function pkgpurl::purl_rmd() just less cumbersome alternative Makefile approach outlined .","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Facilitate Authoring R Packages in the R Markdown File Format","text":"R Markdown format provides several advantages bare R source format developing R package: Mix Markdown Code allows actual code freely mixed explanatory supplementary information expressive Markdown format instead rely # comments . general, encourage actually record code-accompanying information ’re able use full spectrum Pandoc’s Markdown syntax like inline formatting, lists, tables, quotations math1. especially powerful combination Visual R Markdown feature introduced RStudio 1.4, – addition visual editor – offers feature whose utility can hardly overestimated: Pandoc Markdown canonicalization (file save2). example, allows paragraphs wrapped automatically desired line width; write minimal sloppy pipe table automatically normalized beautifully formatted actually readable one. relevant editor options adjust canonical Markdown generation can either set per .Rmd file, e.g. per project usual PACKAGE_NAME.Rproj file, e.g. (’d recommend set per project, apply whole package including .Rmd vignettes.) code single, well-structured file traditional recommendation lose overview package’s R source code split multiple files. popular (useful) book R Packages gives following advice: ’s hard predict file function lives , suggests ’s time separate functions files reconsider naming functions /files. think just ridiculous. Instead, encourage keep code (far possible) single file Rmd/PACKAGE_NAME.Rmd structure according rules described , even allows pkgdown Reference: index automatically sync source code structure. result, re-organize (thus likely improve) package’s code structure whenever intend improve pkgdown reference – vice versa. Keeping code single file frees traditional hassle finding viable (end still unsatisfactory) way organize R source code across multiple files. course, still good reasons outsource code separate files certain situations, nothing stopping . can also exclude whole .Rmd files purling using .nopurl.Rmd filename suffix. Improved overview navigation can rely RStudio’s code outline easily navigate longer .Rmd files. IMHO provides significantly better usability code section standard .R files. makes easy find way around source files thousands lines long. RStudio’s Go File/Function shortcut works .Rmd files .R files. Improved visual clarity use RStudio editor proper R Markdown syntax highlighting, probably like gained visual clarity distinguishing individual functions/code parts (putting separate R code chunks). also facilitates creating meaningful document structure (Markdown) alongside actual R source code. Easily toggle code inclusion can put development-code never lands generated R source files (thus R package) separate code chunks chunk option purl = FALSE. turns convenient certain situations. example, good way reproducibly document generation cleaned versions exported data well internal data. avoids outsource code separate files data-raw/ adding directory .Rbuildignore, .e. need use usethis::use_data_raw(). Instead, just set purl = FALSE relevant code chunk(s). can () still use usethis::use_data() (optionally overwrite = TRUE) generate files data/ holding external package data well R/sysdata.rda file (using internal = TRUE) holding internal package data. Easily toggle styler use styler auto-format code globally setting knitr::opts_chunk$set(tidy = \"styler\"), can still opt-per-chunk basis setting tidy = FALSE. gives pleasant flexibility. Unfortunately, also notable drawbacks R Markdown format: Additional workflow step pkgpurl approach writing R packages R Markdown format introduces one additional step beginning typical package development workflows: Running pkgpurl::purl_rmd() generate R/*.gen.R files original Rmd/*.Rmd sources documenting/checking/testing/building package. Given sufficient user demand, probably integrated devtools’ functions future, additional action taken user relying RStudio’s built-package building infrastructure. time , ’s recommended set custom shortcut3 one pkgpurl::purl_rmd() pkgpurl::process_pkg() registered RStudio add-ins. Differing setup Setting new project write R package R Markdown differs slightly classic approach. suitable convenience function like create_rmd_package() set necessary parts probably added usethis future. time , can use ready--go R Markdown Package Development Template starting point creating new R packages R Markdown format. Unwieldy debugging Debugging can bit laborious since line numbers warning error messages always refer generated R/*.gen.R file(s), underlying Rmd/*.Rmd source code file(s). need , first look line numbers R/*.gen.R file(s) understand function / code parts cause issue order know fix Rmd/*.Rmd source(s). Missing roxygen2 auto-completion .R files, RStudio currently doesn’t support auto-completion roxygen2 tags .Rmd files Reflow Comment command doesn’t properly work . known issues hopefully resolved near future.","code":"--- editor_options:   markdown:     wrap: 160     references:       location: section     canonical: true --- MarkdownWrap: Column MarkdownWrapAtColumn: 160 MarkdownReferences: Section MarkdownCanonical: Yes"},{"path":"https://pkgpurl.rpkg.dev/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Facilitate Authoring R Packages in the R Markdown File Format","text":"install latest development version pkgpurl, run following R:","code":"if (!(\"remotes\" %in% rownames(installed.packages()))) {   install.packages(pkgs = \"remotes\",                    repos = \"https://cloud.r-project.org/\") }  remotes::install_gitlab(repo = \"salim_b/r/pkgs/pkgpurl\")"},{"path":"https://pkgpurl.rpkg.dev/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Facilitate Authoring R Packages in the R Markdown File Format","text":"(function) reference found .","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/index.html","id":"r-markdown-format","dir":"","previous_headings":"Development","what":"R Markdown format","title":"Facilitate Authoring R Packages in the R Markdown File Format","text":"package’s source code written R Markdown file format facilitate practices commonly referred literate programming. allows actual code freely mixed explanatory supplementary information expressive Markdown format instead rely # comments . .gen.R suffixed R source code found R/ generated respective R Markdown counterparts Rmd/ using pkgpurl::purl_rmd()4. Always make changes .Rmd files – never .R files – run pkgpurl::purl_rmd() regenerate R source files.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/index.html","id":"coding-style","dir":"","previous_headings":"Development","what":"Coding style","title":"Facilitate Authoring R Packages in the R Markdown File Format","text":"package borrows lot Tidyverse design philosophies. R code adheres principles specified Tidyverse Design Guide wherever possible formatted according Tidyverse Style Guide (TSG) following exceptions: Line width limited 160 characters, double limit proposed TSG (80 characters ridiculously little given today’s high-resolution wide screen monitors). Furthermore, preferred style breaking long lines differs. Instead wrapping directly expression’s opening bracket suggested TSG, prefer two fewer line breaks indent subsequent lines within expression opening bracket: results less vertical horizontal spread code better readability pipes. Usage magrittr’s compound assignment pipe-operator %<>% desirable5. Usage R’s right-hand assignment operator -> allowed6. R source code split several files suggested TSG instead (far possible) kept single file Rmd/pkgpurl.Rmd well-structured thanks Markdown support. far possible, deviations TSG plus additional restrictions formally specified lintr configuration file .lintr, lintr can used right away check formatting issues:","code":"# TSG proposes this do_something_very_complicated(   something = \"that\",   requires = many,   arguments = \"some of which may be long\" )  # we prefer this do_something_very_complicated(something = \"that\",                               requires = many,                               arguments = \"some of which may be long\") pkgpurl::lint_rmd()"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pkgdown reference index — gen_pkgdown_ref","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"Generates pkgdown reference index based heading hierarchy structure package's main .Rmd file.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"","code":"gen_pkgdown_ref(rmd)"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"rmd (R) Markdown file content character scalar.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"list.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"Basically, elements pkgdown reference index except desc keys derived rmd's Markdown headings hierarchy. desc keys, however, assembled paragraph(s) specially named headings. See details.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"special-headings","dir":"Reference","previous_headings":"","what":"Special headings","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"Headings exactly match certain strings (case-insensitive, without inline formatting additional text) treated specially. overview:","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"parsing-rules","dir":"Reference","previous_headings":"","what":"Parsing rules","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"able unambiguously map .Rmd file's heading hierarchy pkgdown reference index, parsing rules necessary. Attention must paid fact , (R) Markdown supports six heading levels (corresponding HTML's <h1>–<h6> tags), pkgdown reference index supports two (title subtitle). following rules define reference index generated: Headings heading named INTERNAL, NOTES, TEMPORARY TMP (case-insensitive, without inline formatting) simply ignored generating reference index. Every heading ) inline-formatted verbatim b) contain whitespace characters considered name help topic (usually name function dataset) included reference index. maps contents key reference index' YAML. Non-help-topic headings help topic headings used reference index (sub)titles far hierarchical nesting allows. precisely, non-help-topic headings highest two levels help topic heading used title subtitle, rest headings help topic heading ignored – heading named EXPORTED (case-insensitive, without inline formatting) always ignored regardless level. maps title subtitle keys reference index' YAML. Paragraph(s) heading named DESCRIPTION (case-insensitive, without inline formatting), turn hierarchically title subtitle heading, used description respective (sub)title. maps desc key reference index' YAML.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"parsing-example","dir":"Reference","previous_headings":"","what":"Parsing example","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"example might better explain parsing rules work thousand words, simplified one. fed gen_pkgdown_ref(), following R Markdown content...   ...yields pkgdown index (converted YAML):","code":"reference: - contents: main_fn - title: First group of fns   desc: The description text for *First group of fns*. - contents: group_wide_fn - subtitle: Some subgroup - contents:   - subgroup_fn_1   - subgroup_fn_2   - sub_subgroup_fn - subtitle: Another subgroup   desc: The description text for *Another subgroup*. - contents: another_subgroup_fn - title: Second group of fns - subtitle: Yet another subgroup - contents: yet_another_subgroup_fn"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/gen_pkgdown_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pkgdown reference index — gen_pkgdown_ref","text":"","code":"pal::gh_text_file(path = \"Rmd/pal.Rmd\",                   owner = \"salim-b\",                   name = \"pal\") |>   pkgpurl::gen_pkgdown_ref() |>   yaml::as.yaml() |>   cat() #> reference: #> - title: Statistical computing / numbers #> - contents: #>   - safe_seq_len #>   - safe_max #>   - safe_min #>   - round_to #>   - stat_mode #> - title: Data frames / Tibbles #> - contents: #>   - is_equal_df #>   - reduce_df_list #> - title: Lists #> - contents: #>   - as_flat_list #>   - list_drop #>   - list_keep #> - title: Strings #> - subtitle: Vectorized #> - contents: #>   - as_chr #>   - escape_lf #>   - prettify_nr #>   - sentenceify #>   - capitalize_first #>   - wrap_chr #> - subtitle: Non-vectorized #> - contents: #>   - as_line_feed_chr #>   - dsv_colnames #> - subtitle: Collapsed into character scalar #> - contents: #>   - as_string #>   - as_comment_string #>   - fuse_regex #>   - prose_ls #> - title: Filesystem paths #>   desc: Functions to work with filesystem paths. #> - contents: #>   - path_mod_time #>   - flatten_path_tree #>   - draw_path_tree #> - title: Dots #>   desc: |- #>     Extending [rlang's *check dots* functions](https://rlang.r-lib.org/reference/index.html#check-dots), making the use of [R's `...` argument #>     placeholder](https://rdrr.io/r/base/dots.html) yet another bit safer. #> - contents: check_dots_named #> - title: R packages #> - contents: #>   - ls_pkg #>   - assert_pkg #>   - is_pkg_installed #>   - is_pkg_cran #>   - is_pkg_dir #>   - is_pkgdown_dir #>   - pkg_config_val #>   - has_pkg_config_val #>   - use_pkg #> - subtitle: Package DESCRIPTION #>   desc: Extending the [desc](https://github.com/r-lib/desc#readme) package. #> - contents: #>   - desc_list #>   - desc_value #>   - desc_url_git #> - subtitle: Package documentation #>   desc: Extending the [roxygen2](https://roxygen2.r-lib.org/) package. #> - contents: #>   - roxy_blocks #>   - roxy_obj #>   - roxy_tag_value #> - title: (Pandoc) Markdown #> - contents: #>   - as_md_list #>   - as_md_vals #>   - as_md_val_list #>   - pipe_table #>   - strip_md #>   - strip_md_footnotes #> - subtitle: CommonMark parsing #>   desc: Extending the [commonmark](https://github.com/r-lib/commonmark#readme) package. #> - contents: #>   - md_to_xml #>   - md_xml_subnode_ix #>   - xml_to_md #> - title: R Markdown / knitr #> - contents: #>   - build_readme #>   - knitr_table_format #>   - strip_yaml_header #> - subtitle: Output formats #>   desc: |- #>     [Custom R Markdown output formats](https://bookdown.org/yihui/rmarkdown/new-formats.html) which can be used in addition to the [default output #>     formats](https://bookdown.org/yihui/rmarkdown/output-formats.html). #> - contents: gitlab_document #> - title: HTML widgets #>   desc: Extending the [htmlwidgets](https://www.htmlwidgets.org/) package. #> - contents: #>   - write_widget #>   - write_widget_deps #> - title: GitHub #>   desc: Extending the [gh](https://gh.r-lib.org/) package, leveraging [GitHub's GraphQL #>     API](https://docs.github.com/en/graphql). #> - contents: #>   - gh_text_file #>   - gh_text_files #>   - gh_dir_ls #> - title: HTTP #>   desc: Extending the [httr](https://httr.r-lib.org/) package that wraps the [curl](https://jeroen.cran.dev/curl/) #>     package. #> - contents: #>   - assert_mime_type #>   - is_http_success #>   - is_url #> - title: TOML #> - contents: #>   - toml_read #>   - toml_validate #> - title: cli #>   desc: Extending the [cli](https://cli.r-lib.org/) package. #> - contents: #>   - cli_qty_lgl #>   - cli_no_lgl #>   - cli_process_expr #> - title: System interaction #> - contents: #>   - assert_cli #>   - path_script #> - title: Miscellaneous #> - contents: #>   - assert_class_any #>   - capture_print #>   - cat_lines #>   - cols_regex #>   - order_by #>   - prose_ls_fn_param #>   - when"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/lint_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint R Markdown package — lint_rmd","title":"Lint R Markdown package — lint_rmd","text":"convenience wrapper around lintr::lint_dir() tailored typical R Markdown package. use function, lintr package required.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/lint_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint R Markdown package — lint_rmd","text":"","code":"lint_rmd(path = \".\", excl_vignettes = TRUE)"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/lint_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint R Markdown package — lint_rmd","text":"path Path root package directory. excl_vignettes Whether exclude .Rmd files vignettes/. logical scalar.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/lint_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint R Markdown package — lint_rmd","text":"list lint objects.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/lint_rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lint R Markdown package — lint_rmd","text":"avoid unnecessary noise, generated R/*.gen.R files well R Markdown vignettes vignettes/*.Rmd excluded linting. function also registered RStudio add-, allowing RStudio users assign custom shortcut invoke command palette.","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/reference/load_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Load R Markdown package — load_pkg","title":"Load R Markdown package — load_pkg","text":"Executes steps load R package written R Markdown format one go: Purl relevant Rmd/*.Rmd files R/*.gen.R files using purl_rmd(). Loads package using devtools::load_all().","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/load_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load R Markdown package — load_pkg","text":"","code":"load_pkg(   path = \".\",   add_copyright_notice = pal::pkg_config_val(key = \"add_copyright_notice\", pkg =     this_pkg, default = TRUE),   add_license_notice = pal::pkg_config_val(key = \"add_license_notice\", pkg = this_pkg,     default = TRUE),   gen_pkgdown_ref = pal::pkg_config_val(key = \"gen_pkgdown_ref\", pkg = this_pkg, default     = FALSE),   reset = TRUE,   recompile = FALSE,   export_all = TRUE,   helpers = TRUE,   quiet = FALSE,   ... )"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/load_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load R Markdown package — load_pkg","text":"path Path root package directory. add_copyright_notice Whether add copyright notice beginning generated .R files recommended e.g. GNU licenses. notice consists name description program word Copyright (C) followed release years name(s) copyright holder(s), specified, author(s). year always current year. information extracted package's DESCRIPTION file. logical scalar. applies path actually R package directory. add_license_notice Whether add license notice beginning generated .R files recommended e.g. GNU licenses. license determined package's DESCRIPTION file currently AGPL-3.0--later license supported. logical scalar. applies path actually R package directory. gen_pkgdown_ref Whether overwrite pkgdown's reference index configuration file _pkgdown.yml auto-generated one based main input file described gen_pkgdown_ref(). logical scalar. applies path actually R package directory, pkgdown set main R Markdown file exists. reset clear package environment reset file cache loading pieces package. largely equivalent running unload(), however old namespaces completely removed .onUnload() hooks called. Use reset = FALSE may faster large code bases, significantly less accurate approximation. recompile DEPRECATED. force recompile DLL source code, present. equivalent running pkgbuild::clean_dll() load_all export_all TRUE (default), export objects. FALSE, export objects listed exports NAMESPACE file. helpers TRUE loads testthat test helpers. quiet TRUE suppresses output function. ... Additional arguments passed pkgload::load_all().","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/load_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load R Markdown package — load_pkg","text":"path, invisibly.","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/reference/main_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine a package's main .Rmd source file — main_rmd","title":"Determine a package's main .Rmd source file — main_rmd","text":"Determines R Markdown file Rmd/ path package's main source file. multiple .Rmd files present, one whose name matches package name selected.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/main_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine a package's main .Rmd source file — main_rmd","text":"","code":"main_rmd(path = \".\")"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/main_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine a package's main .Rmd source file — main_rmd","text":"path Path root package directory.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/main_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine a package's main .Rmd source file — main_rmd","text":"character vector, length 1 main .Rmd found, otherwise length 0.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/pkg_config.html","id":null,"dir":"Reference","previous_headings":"","what":"pkgpurl package configuration metadata — pkg_config","title":"pkgpurl package configuration metadata — pkg_config","text":"tibble metadata possible pkgpurl package configuration options. See pal::pkg_config_val() information.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/pkg_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pkgpurl package configuration metadata — pkg_config","text":"","code":"pkg_config"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/pkg_config.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pkgpurl package configuration metadata — pkg_config","text":"tibble columns key, default_value description.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/pkg_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pkgpurl package configuration metadata — pkg_config","text":"","code":"pkgpurl::pkg_config #> # A tibble: 3 × 3 #>   key                  default_value description                                                                                                                 #>   <chr>                <list>        <chr>                                                                                                                       #> 1 add_copyright_notice <NULL>        Whether or not to add a **copyright notice** at the beginning of the generated `.R` files as recommended by e.g. the [GNU … #> 2 add_license_notice   <NULL>        Whether or not to add a **license notice** at the beginning of the generated `.R` files as recommended by e.g. the [GNU li… #> 3 gen_pkgdown_ref      <NULL>        Whether or not to overwrite [pkgdown][pkgdown::pkgdown-package]'s [reference index](https://pkgdown.r-lib.org/reference/bu…"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/pkgpurl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pkgpurl: Facilitate Authoring R Packages in the R Markdown File Format — pkgpurl-package","title":"pkgpurl: Facilitate Authoring R Packages in the R Markdown File Format — pkgpurl-package","text":"pkgpurl facilitates R package authoring using literate programming approach. main idea behind write R source code R Markdown files (`Rmd/*.Rmd`), allows actual code freely mixed explanatory supplementary information expressive Markdown format. main object pkgpurl provide standardized way compile bare `.R` files prose-enhanced thus human-oriented `.Rmd` files.","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/reference/pkgpurl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pkgpurl: Facilitate Authoring R Packages in the R Markdown File Format — pkgpurl-package","text":"Maintainer: Salim Brüggemann salim-b@pm.(ORCID)","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/process_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Process R Markdown package from source to installation — process_pkg","title":"Process R Markdown package from source to installation — process_pkg","text":"Executes steps process R package written R Markdown format source installation one go: Purl relevant Rmd/*.Rmd files R/*.gen.R files using purl_rmd(). Re-generate pkgdown reference index based package's main R Markdown file using gen_pkgdown_ref() (gen_pkgdown_ref = TRUE). Re-build package documentation using devtools::document() (document = TRUE). Build install package using devtools::install() (build_and_install = TRUE). Restarts R session using rstudioapi::restartSession() (restart_r_session = TRUE).","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/process_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process R Markdown package from source to installation — process_pkg","text":"","code":"process_pkg(   path = \".\",   add_copyright_notice = pal::pkg_config_val(key = \"add_copyright_notice\", pkg =     this_pkg, default = TRUE),   add_license_notice = pal::pkg_config_val(key = \"add_license_notice\", pkg = this_pkg,     default = TRUE),   gen_pkgdown_ref = pal::pkg_config_val(key = \"gen_pkgdown_ref\", pkg = this_pkg, default     = TRUE),   document = TRUE,   build_and_install = TRUE,   restart_r_session = build_and_install,   quiet = TRUE,   roclets = NULL,   args = getOption(\"devtools.install.args\"),   dependencies = NA,   upgrade = \"never\",   keep_source = getOption(\"keep.source.pkgs\") )"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/process_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process R Markdown package from source to installation — process_pkg","text":"path Path root package directory. add_copyright_notice Whether add copyright notice beginning generated .R files recommended e.g. GNU licenses. notice consists name description program word Copyright (C) followed release years name(s) copyright holder(s), specified, author(s). year always current year. information extracted package's DESCRIPTION file. logical scalar. applies path actually R package directory. add_license_notice Whether add license notice beginning generated .R files recommended e.g. GNU licenses. license determined package's DESCRIPTION file currently AGPL-3.0--later license supported. logical scalar. applies path actually R package directory. gen_pkgdown_ref Whether overwrite pkgdown's reference index configuration file _pkgdown.yml auto-generated one based main input file described gen_pkgdown_ref(). logical scalar. applies path actually R package directory, pkgdown set main R Markdown file exists. document Whether re-build package documentation purling Rmd/*.Rmd R/*.gen.R. build_and_install Whether build install package purling Rmd/*.Rmd R/*.gen.R. restart_r_session Whether restart R session. Highly recommended build_and_install = TRUE, possible R run within RStudio. quiet Whether suppress printing status output internal processing. roclets Character vector roclet names use package. default, NULL, uses roxygen roclets option, defaults c(\"collate\", \"namespace\", \"rd\"). args optional character vector additional command line arguments passed R CMD INSTALL. defaults value option \"devtools.install.args\". dependencies dependencies want check? Can character vector (selecting \"Depends\", \"Imports\", \"LinkingTo\", \"Suggests\", \"Enhances\"), logical vector. TRUE shorthand \"Depends\", \"Imports\", \"LinkingTo\" \"Suggests\". NA shorthand \"Depends\", \"Imports\" \"LinkingTo\" default. FALSE shorthand dependencies (.e. just check package, dependencies). value \"soft\" means TRUE, \"hard\" means NA. can also specify dependencies one additional fields, common ones include: Config/Needs/website - dependencies used building pkgdown site. Config/Needs/coverage dependencies used calculating test coverage. upgrade package dependencies upgraded? One \"default\", \"ask\", \"always\", \"never\". \"default\" respects value R_REMOTES_UPGRADE environment variable set, falls back \"ask\" unset. \"ask\" prompts user date packages upgrade. non-interactive sessions \"ask\" equivalent \"always\". TRUE FALSE also accepted correspond \"always\" \"never\" respectively. keep_source TRUE keep srcrefs installed package. useful debugging (especially inside RStudio). defaults option \"keep.source.pkgs\".","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/process_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process R Markdown package from source to installation — process_pkg","text":"path, invisibly.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/process_pkg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process R Markdown package from source to installation — process_pkg","text":"function also registered RStudio add-, allowing RStudio users assign custom shortcut invoke command palette.","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/reference/purl_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","title":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","text":"function strives provide standardized way convert relevant .Rmd files Rmd/ subdirectory bare .R files R/ subdirectory using knitr::purl(). mainly intended authoring R packages R Markdown file format.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/purl_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","text":"","code":"purl_rmd(   path = \".\",   add_copyright_notice = pal::pkg_config_val(key = \"add_copyright_notice\", pkg =     this_pkg, default = TRUE),   add_license_notice = pal::pkg_config_val(key = \"add_license_notice\", pkg = this_pkg,     default = TRUE),   gen_pkgdown_ref = pal::pkg_config_val(key = \"gen_pkgdown_ref\", pkg = this_pkg, default     = TRUE) )"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/purl_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","text":"path Path root package directory. add_copyright_notice Whether add copyright notice beginning generated .R files recommended e.g. GNU licenses. notice consists name description program word Copyright (C) followed release years name(s) copyright holder(s), specified, author(s). year always current year. information extracted package's DESCRIPTION file. logical scalar. applies path actually R package directory. add_license_notice Whether add license notice beginning generated .R files recommended e.g. GNU licenses. license determined package's DESCRIPTION file currently AGPL-3.0--later license supported. logical scalar. applies path actually R package directory. gen_pkgdown_ref Whether overwrite pkgdown's reference index configuration file _pkgdown.yml auto-generated one based main input file described gen_pkgdown_ref(). logical scalar. applies path actually R package directory, pkgdown set main R Markdown file exists.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/purl_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","text":"path, invisibly.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/purl_rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","text":"generated .R files named .Rmd files plus suffix .gen indicate file auto-generated. file Rmd/foo.Rmd example converted R/foo.gen.R. R Markdown file format allows intermingle code related prose Markdown syntax optimized human readability. facilitates (best) practices commonly referred literate programming. practice, main advantage writing R code R Markdown rely # comments explain, annotate otherwise elaborate code. also allows easily compile source code beautifully looking HTML, PDF etc. files using rmarkdown::render(). function also registered RStudio add-, allowing RStudio users assign custom shortcut invoke command palette.","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/purl_rmd.html","id":"-rmd-files-excluded-from-purling","dir":"Reference","previous_headings":"","what":".Rmd files excluded from purling","title":"Purl Rmd/*.Rmd to R/*.gen.R — purl_rmd","text":"purl_rmd() generate .R file every R Markdown file Rmd/ subdirectory. Two types .Rmd files excluded purling: Files suffix .nopurl name, e.g. Rmd/playground.nopurl.Rmd. Hidden files per Unix convention whose names start dot, e.g. Rmd/.playground.Rmd. convention allows easy exclusion specific .Rmd files purling. common case scripts generate package-internal data raw sources. script stored Rmd/data.nopurl.Rmd, corresponding file R/*.R generated. sake clarity, generally advised prefer .nopurl suffix hiding files.","code":""},{"path":[]},{"path":"https://pkgpurl.rpkg.dev/dev/reference/run_nopurl_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Run *.nopurl.Rmd files — run_nopurl_rmd","title":"Run *.nopurl.Rmd files — run_nopurl_rmd","text":"Executes .Rmd files supposed contain code included source package, .e. usually outsourced separate .Rmd files .nopurl suffix filenames. files typically used generate package data. error encountered saying internal error -3 R_decompress1, restart R session run .","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/run_nopurl_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run *.nopurl.Rmd files — run_nopurl_rmd","text":"","code":"run_nopurl_rmd(   path = \".\",   path_rmd = fs::dir_ls(path = fs::path(path, \"Rmd\"), recurse = TRUE, type = \"file\", glob     = \"*.nopurl.Rmd\"),   env = NULL,   document = TRUE,   build_and_install = TRUE,   restart_r_session = TRUE,   quiet = TRUE,   roclets = NULL,   args = getOption(\"devtools.install.args\"),   dependencies = NA,   upgrade = \"never\",   keep_source = getOption(\"keep.source.pkgs\") )"},{"path":"https://pkgpurl.rpkg.dev/dev/reference/run_nopurl_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run *.nopurl.Rmd files — run_nopurl_rmd","text":"path Path root package directory. path_rmd Path(s) .Rmd files executed. character vector. env Environment evaluate .Rmd files . NULL, global environment used. document Whether re-build package documentation last .Rmd file executed. build_and_install Whether build install package .Rmd file execution. restart_r_session Whether restart R session last .Rmd file executed. Highly recommended build_and_install = TRUE, possible R run within RStudio. quiet TRUE suppresses output function. roclets Character vector roclet names use package. default, NULL, uses roxygen roclets option, defaults c(\"collate\", \"namespace\", \"rd\"). args optional character vector additional command line arguments passed R CMD INSTALL. defaults value option \"devtools.install.args\". dependencies dependencies want check? Can character vector (selecting \"Depends\", \"Imports\", \"LinkingTo\", \"Suggests\", \"Enhances\"), logical vector. TRUE shorthand \"Depends\", \"Imports\", \"LinkingTo\" \"Suggests\". NA shorthand \"Depends\", \"Imports\" \"LinkingTo\" default. FALSE shorthand dependencies (.e. just check package, dependencies). value \"soft\" means TRUE, \"hard\" means NA. can also specify dependencies one additional fields, common ones include: Config/Needs/website - dependencies used building pkgdown site. Config/Needs/coverage dependencies used calculating test coverage. upgrade package dependencies upgraded? One \"default\", \"ask\", \"always\", \"never\". \"default\" respects value R_REMOTES_UPGRADE environment variable set, falls back \"ask\" unset. \"ask\" prompts user date packages upgrade. non-interactive sessions \"ask\" equivalent \"always\". TRUE FALSE also accepted correspond \"always\" \"never\" respectively. keep_source TRUE keep srcrefs installed package. useful debugging (especially inside RStudio). defaults option \"keep.source.pkgs\".","code":""},{"path":"https://pkgpurl.rpkg.dev/dev/reference/run_nopurl_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run *.nopurl.Rmd files — run_nopurl_rmd","text":"path_rmd, invisibly.","code":""},{"path":[]}]
