% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgpurl.gen.R
\name{purl_rmd}
\alias{purl_rmd}
\title{Purl \verb{Rmd/*.Rmd} to \verb{R/*.gen.R}}
\usage{
purl_rmd(
  path = ".",
  add_copyright_notice = getOption("pkgpurl.add_copyright_notice"),
  add_license_notice = getOption("pkgpurl.add_license_notice"),
  gen_pkgdown_ref = getOption("pkgpurl.gen_pkgdown_ref", default = TRUE)
)
}
\arguments{
\item{path}{The path to the root of the package directory.}

\item{add_copyright_notice}{Whether or not to add a \strong{copyright notice} at the beginning of the generated \code{.R} files as recommended by e.g. the \href{https://www.gnu.org/licenses/gpl-howto.html}{GNU licenses}. The notice consists of the name and description of the program and the word \code{Copyright (C)},
followed by the release years and the name(s) of the copyright holder(s), or if not specified, the author(s). The year is always the current year. All the
other information is extracted from the package's \code{DESCRIPTION} file. A logical scalar or \code{NULL}. If \code{NULL}, the notice will be added only if \code{path} \link[pal:is_pkg_dir]{is actually an R package directory}. Defaults to the R option \code{pkgpurl.add_copyright_notice}.}

\item{add_license_notice}{Whether or not to add a \strong{license notice} at the beginning of the generated \code{.R} files as recommended by e.g. the \href{https://www.gnu.org/licenses/gpl-howto.html}{GNU licenses}. The license is determined from the package's \code{DESCRIPTION} file and currently only the
\href{https://spdx.org/licenses/AGPL-3.0-or-later.html}{\code{AGPL-3.0-or-later} license} is supported. A logical scalar or \code{NULL}. If \code{NULL}, it will be added only
if \code{path} \link[pal:is_pkg_dir]{is actually an R package directory}. Defaults to the R option \code{pkgpurl.add_license_notice}.}

\item{gen_pkgdown_ref}{Whether or not to overwrite \link[pkgdown:pkgdown-package]{pkgdown}'s \href{https://pkgdown.r-lib.org/reference/build_reference.html#reference-index}{reference index} in the configuration file \verb{_pkgdown.yml} with an auto-generated one
based on the main input file as described in \code{\link[=gen_pkgdown_ref]{gen_pkgdown_ref()}}. A logical scalar. Only applies if \code{path} \link[pal:is_pkg_dir]{is actually an R package directory}, \link[pal:is_pkgdown_dir]{pkgdown is setup} and a \link[=main_rmd]{main R Markdown file} exists. Defaults to the R option
\code{pkgpurl.gen_pkgdown_ref}.}
}
\value{
\code{path}, invisibly.
}
\description{
This function strives to provide a standardized way to convert all relevant \code{.Rmd} files in the \verb{Rmd/} subdirectory to bare \code{.R} files in the \verb{R/}
subdirectory using \code{\link[knitr:knit]{knitr::purl()}}. It is mainly intended for authoring R packages in the \href{https://rmarkdown.rstudio.com/}{R Markdown file format}.
}
\details{
The generated \code{.R} files will be named the same as the \code{.Rmd} files plus the suffix \code{.gen} to indicate the file was auto-generated. So the file
\code{Rmd/foo.Rmd} for example will be converted to \code{R/foo.gen.R}.

The R Markdown file format allows you to intermingle code with related prose in \href{https://bookdown.org/yihui/rmarkdown/markdown-syntax.html}{Markdown syntax}
optimized for human readability. This facilitates (best) practices which are commonly referred to as
\href{https://en.wikipedia.org/wiki/Literate_programming}{\emph{literate programming}}.

In practice, the main advantage of writing R code in R Markdown is that you don't have to rely on
\href{https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Comments}{\verb{#} comments} to explain, annotate or otherwise elaborate on your code. It also
allows you to easily compile your source code to beautifully looking HTML, PDF etc. files using \code{\link[rmarkdown:render]{rmarkdown::render()}}.

This function is also registered as an \href{https://rstudio.github.io/rstudioaddins/}{RStudio add-in} allowing RStudio users to assign a custom shortcut to it.
}
\section{\code{.Rmd} files excluded from purling}{
\code{purl_rmd()} does not generate an \code{.R} file for each and every R Markdown file in the \verb{Rmd/} subdirectory. Two types of \code{.Rmd} files are excluded from
purling:
\enumerate{
\item Files having the suffix \code{.nopurl} in their name, e.g. \code{Rmd/playground.nopurl.Rmd}.
\item Hidden files \href{https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory#Unix_and_Unix-like_environments}{as per Unix convention} whose names start
with a dot, e.g. \code{Rmd/.playground.Rmd}.
}

The above convention allows for easy exclusion of specific \code{.Rmd} files from purling. A common case for this are scripts that generate \href{https://r-pkgs.org/data.html#data-sysdata}{package-internal data} from raw sources. Such a script could be stored as \code{Rmd/data.nopurl.Rmd}, so that no corresponding file
under \verb{R/*.R} is generated. For the sake of clarity, it's generally advised to prefer the \code{.nopurl} suffix over hiding files.
}

